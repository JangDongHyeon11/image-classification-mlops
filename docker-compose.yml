version: "3.8"

services:
  # dev workspace
  jupyter:
    # platform: linux/x86_64 # for others (mostly) or can just remove this line
    platform: linux/arm64 # for Mac M1
    container_name: jupyter
    build:
      context: ./services/jupyter
      dockerfile: Dockerfile
      args:
        NB_USER: ${JUPYTER_USER}
        NB_PWD: 123456789
        NB_UID: 1412
        CONDA_DIR: /opt/anaconda3
        ARCH: aarch64 # aarch64 for Mac M1 | x86_64 for others (mostly)
        JUPYTER_PORT: ${JUPYTER_PORT}
        MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT}
        MAIN_CONDA_ENV_NAME: jang
    env_file:
      - .env
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:${MLFLOW_PORT}
      - PREFECT_API_URL=http://prefect:${PREFECT_PORT}/api
      - DB_CONNECTION_URL=postgresql://dl_user:admin1234@postgres:${POSTGRES_PORT}/dl_pg_db
      - DB_PREDICTION_TABLE_NAME=predictions
      - DB_API_LOG_TABLE_NAME=api_log
    networks:
      - mlops_network
    ports:
      - "${JUPYTER_PORT}:${JUPYTER_PORT}"
    volumes:
      - ./:/home/${JUPYTER_USER}/workspace/
      - mlflow_data:${MLFLOW_ARTIFACT_ROOT}
      - evidently_data:/home/${JUPYTER_USER}/workspace/deployments/evidently_workspaces
    depends_on:
      - mlflow
      - prefect

  # ML platform / experiment tracking
  mlflow:
    platform: linux/arm64
    container_name: mlflow
    restart: always
    build:
      context: ./services/mlflow
      dockerfile: Dockerfile
      args:
        MLFLOW_PORT: ${MLFLOW_PORT}
    env_file:
      - .env
    environment:
      - BACKEND_STORE_URI=postgresql://mlflow_user:admin1234@postgres:${POSTGRES_PORT}/mlflow_pg_db
    networks:
      - mlops_network
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    volumes:
      - mlflow_data:${MLFLOW_ARTIFACT_ROOT}
    depends_on:
      postgres:
        condition: service_healthy

  # orchestrator
  prefect:
    platform: linux/arm64
    container_name: prefect
    restart: always
    build:
      context: ./services/prefect
      dockerfile: Dockerfile
      args:
        PREFECT_PORT: ${PREFECT_PORT}
    env_file:
      - .env
    environment:
      - PREFECT_API_URL=http://127.0.0.1:${PREFECT_PORT}/api
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://prefect_user:admin1234@postgres:${POSTGRES_PORT}/prefect_pg_db
    networks:
      - mlops_network
    ports:
      - "${PREFECT_PORT}:${PREFECT_PORT}"
    volumes:
      - prefect_data:${PREFECT_LOCAL_STORAGE_PATH}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl $${PREFECT_API_URL}/health"]
      interval: 5s
      timeout: 5s
      retries: 5

  # sql database
  postgres:
    platform: linux/arm64
    container_name: postgres
    image: postgres:15.3
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    networks:
      - mlops_network
    volumes:
      - ./services/postgres/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    platform: linux/arm64
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin1234@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    networks:
      - mlops_network
    ports:
      - "16543:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

  ray:
    platform: linux/arm64
    container_name: ray-head
    build:
      context: ./services/ray
      dockerfile: Dockerfile
      args:
        MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT}
        # for amd64 (x86_64) please leave ARCH_TRAILING_IMG_NAME empty
        ARCH_TRAILING_IMG_NAME: "-aarch64"
    shm_size: "2gb"
    # NOTE: if you change RAY_METRICS_EXPORT_PORT in .env,
    # you need to change the port in prometheus.yaml too
    env_file:
      - .env
    environment:
      - RAY_GRAFANA_HOST=http://grafana:3000
      - RAY_PROMETHEUS_HOST=http://prometheus:9090
      - RAY_PROMETHEUS_NAME=Prometheus
      - RAY_GRAFANA_IFRAME_HOST=http://localhost:${GRAFANA_PORT}
      - MLFLOW_TRACKING_URI=http://mlflow:5050
      # - DB_CONNECTION_URL=postgresql://spark_user:admin1234@postgres:${POSTGRES_PORT}/spark_pg_db
    ports:
      - ${RAY_DASHBOARD_PORT}:${RAY_DASHBOARD_PORT}
    healthcheck:
      test: ["CMD-SHELL", "ray status"]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mlflow-data:${MLFLOW_ARTIFACT_ROOT}

  # overall monitoring & dashboards
  grafana:
    platform: linux/arm64
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - backend_network
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./services/grafana/grafana_datasources.yml:/etc/grafana/provisioning/datasources/grafana_datasources.yml:ro
      - ./services/grafana/grafana_dashboards.yml:/etc/grafana/provisioning/dashboards/grafana_dashboards.yml:ro
      - ./services/grafana/dashboards:/opt/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  # time-series database
  prometheus:
    platform: linux/arm64
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - backend_network
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./services/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus_data:/prometheus
    command: "--config.file=/etc/prometheus/prometheus.yaml"

  # host machine's metrics exporter for prometheus
  node_exporter:
    platform: linux/arm64
    image: quay.io/prometheus/node-exporter:v1.5.0
    container_name: node_exporter
    restart: unless-stopped
    pid: host
    networks:
      - backend_network
    volumes:
      - /:/host:ro,rslave
    command: "--path.rootfs=/host"

  # cadvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: unless-stopped
    networks:
      - backend_network
    ports:
      - "${CADVISOR_PORT}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      # this line is needed to make it work on Mac M1
      - /var/run/docker.sock:/var/run/docker.sock:ro
    devices:
      - /dev/kmsg
    privileged: true

networks:
  mlops_network:
    driver: "bridge"
  backend_network:
    driver: "bridge"

volumes:
  mlflow_data:
  prefect_data:
  pgadmin_data:
  pgdata:
